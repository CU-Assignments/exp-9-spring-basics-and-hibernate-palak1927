import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import javax.persistence.*;
import java.util.Date;

// Entity: Account
@Entity
class Account {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String holderName;
    private double balance;

    public Account() {}
    public Account(String holderName, double balance) {
        this.holderName = holderName;
        this.balance = balance;
    }

    // Getters and Setters
    public int getId() { return id; }
    public String getHolderName() { return holderName; }
    public void setHolderName(String holderName) { this.holderName = holderName; }
    public double getBalance() { return balance; }
    public void setBalance(double balance) { this.balance = balance; }
}

// Entity: Transaction Record
@Entity
class TransactionRecord {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    private int fromAccount;
    private int toAccount;
    private double amount;
    private Date transactionDate;

    public TransactionRecord() {}
    public TransactionRecord(int from, int to, double amount) {
        this.fromAccount = from;
        this.toAccount = to;
        this.amount = amount;
        this.transactionDate = new Date();
    }

    // Getters
    public int getId() { return id; }
    public int getFromAccount() { return fromAccount; }
    public int getToAccount() { return toAccount; }
    public double getAmount() { return amount; }
    public Date getTransactionDate() { return transactionDate; }
}

// Main App with Configuration and Service
public class BankingApp {

    private static SessionFactory sessionFactory;

    public static void main(String[] args) {
        try {
            // Configure Hibernate
            Configuration cfg = new Configuration().configure("hibernate.cfg.xml")
                    .addAnnotatedClass(Account.class)
                    .addAnnotatedClass(TransactionRecord.class);
            sessionFactory = cfg.buildSessionFactory();

            // Add test data (Optional, only once)
            //createDummyAccounts();

            // Perform a money transfer
            transferMoney(1, 2, 500);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            sessionFactory.close();
        }
    }

    public static void transferMoney(int fromId, int toId, double amount) {
        Session session = sessionFactory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();

            Account from = session.get(Account.class, fromId);
            Account to = session.get(Account.class, toId);

            if (from == null || to == null) {
                throw new RuntimeException("Account not found.");
            }

            if (from.getBalance() < amount) {
                throw new RuntimeException("Insufficient funds.");
            }

            from.setBalance(from.getBalance() - amount);
            to.setBalance(to.getBalance() + amount);

            session.update(from);
            session.update(to);

            TransactionRecord txn = new TransactionRecord(fromId, toId, amount);
            session.save(txn);

            tx.commit();
            System.out.println("Transaction Successful.");
        } catch (Exception e) {
            if (tx != null) tx.rollback();
            System.out.println("Transaction Failed. Rolled back. Reason: " + e.getMessage());
        } finally {
            session.close();
        }
    }

    // Optional method to add initial accounts
    public static void createDummyAccounts() {
        Session session = sessionFactory.openSession();
        Transaction tx = session.beginTransaction();

        session.save(new Account("Aarushi", 1000));
        session.save(new Account("Riya", 1000));

        tx.commit();
        session.close();

        System.out.println("Dummy accounts created.");
    }
}

HIBERNATE FILE:
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/yourdb</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">yourpassword</property>
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="hibernate.show_sql">true</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
    </session-factory>
</hibernate-configuration>
